# text for polls
default_poll:
  options:
    - Yes
    - Maybe
    - No
  emojis:
    - 0001F44D
    - 0001F937
    - 0001F44E

emojis:
  - "0001F534"
  - "0001F7E0"
  - "0001F7E1"
  - "0001F7E2"
  - "0001F535"
  - "0001F7E3"
  - "0001F7E4"
  - "00002764"
  - "0001F9E1"
  - "0001F49B"
  - "0001F49A"
  - "0001F499"
  - "0001F49C"
  - "0001F90E"
  - "0001F7E5"
  - "0001F7E7"
  - "0001F7E8"
  - "0001F7E9"
  - "0001F7E6"
  - "0001F7EA"

style:

  readout:
    # 1. id
    # 2. creator
    poll_header: __**Poll**__ (id \#{}) __**from {}**__

    # 1. question
    question_string: "**Question**: {}"

    # 1. num_votes
    # 2. "vote"/"votes"
    # 3. emoji
    # 4. option
    # 5. voter names
    option_string: "`{} {}` {}: *{}* - {}"

    # there's no chance of this ever being i18n-ed, but
    # the option is still there.
    vote_singular: "vote "
    vote_plural: votes

    no_votes: "Nobody :("

    poll_overflow: There's too much to display in this poll. Please use
      !poll purge to remove some extraneous options.

    loading: Loading poll...

  delete:
    success: "Poll {} deleted."

  purge:
    success: "{} option(s) deleted from poll {}."

  list:
    no_votes: "No votes :("
    title: Poll List

    summary_string: "`#{}:`  {} - {}"
    footer: "Page {} of {}"

  view:
    overview_title: "Poll #{} (by {})"
    overview_link: "[Link to Poll]({})"
    timestamp: "Poll created {} and was last changed {}"

    option_title: Options
    question_title: Question

  password:
    password_enter: Please enter the reset password.
    password_fail: The reset was unsuccessful.
    password_succeed: The reset was successful.


sql_requests:
  reset: |
    DROP VIEW IF EXISTS PurgeForce;
    DROP VIEW IF EXISTS Purge;
    DROP VIEW IF EXISTS OptionVotes;

    DROP TABLE IF EXISTS Polls;
    DROP TABLE IF EXISTS Options;
    DROP TABLE IF EXISTS Votes;

    CREATE TABLE Polls (
    PollID     serial,
    Question   varchar(255),
    Username   char(16),
    Time       timestamp,
    LastUpdate timestamp,
    Message    char(16),
    Channel    char(16));

    CREATE TABLE Options (
    OptionID  serial,
    PollID    int,
    Original  bool,
    Username  char(16),
    Emoji     char(8),
    Option    varchar(255));

    CREATE TABLE Votes (
    Username  char(16),
    OptionID  int);

    CREATE OR REPLACE VIEW OptionVotes AS (
    SELECT
    MAX(O.OptionID) AS OptionID,
    MAX(O.PollID) AS PollID,
    MAX(O.Option) AS Option,
    COUNT(V.Username) AS VoteCount
    FROM Options AS O
    LEFT OUTER JOIN Votes AS V
    ON O.OptionID=V.OptionID
    GROUP BY O.OptionID);

    CREATE OR REPLACE VIEW PurgeForce AS (
      SELECT
        MAX(O.OptionID) AS OptionID,
        MAX(O.PollID) AS PollID
      FROM Options AS O
        INNER JOIN OptionVotes AS OV
          ON OV.OptionID=O.OptionID
        WHERE (
          O.Original=false AND (
            OV.VoteCount=0 OR (
              OV.VoteCount=1 AND
              O.Username=(
                SELECT Username FROM Votes AS V
                WHERE V.OptionID=O.OptionID
              )
            )
          )
        ) GROUP BY O.OptionID
    );

    CREATE OR REPLACE VIEW Purge AS (
      SELECT
        MAX(O.OptionID) AS OptionID,
        MAX(O.PollID) AS PollID
      FROM Options AS O
      INNER JOIN OptionVotes AS OV
        ON OV.OptionID=O.OptionID
      WHERE (
        O.Original=false AND
        OV.VoteCount=0
      ) GROUP BY O.OptionID
    );

  readout: |
    SELECT MAX(O.OptionID) AS OptionID,
           MAX(Emoji) AS Emoji,
           MAX(Option) AS Option,
           COUNT(V.Username) AS VoteCount,
           STRING_AGG(V.Username, ' ') AS Votes
    FROM Options AS O
    LEFT OUTER JOIN Votes AS V
    ON O.OptionID=V.OptionID
    WHERE O.PollID=%s
    GROUP BY O.OptionID
    ORDER BY
        VoteCount DESC,
        OptionID;

  summary: |
    SELECT MAX(P.PollID) AS PollID,
           MAX(P.Question) AS Question,
           (CASE
                WHEN MAX(MV.VoteCount)=0 THEN %s
                ELSE STRING_AGG(O.Option, ', ') END) AS Result
    FROM (
        SELECT Question,
               PollID
        FROM Polls
        ORDER BY PollID DESC
        OFFSET %s
        LIMIT %s
        ) AS P
    INNER JOIN OptionVotes AS O ON P.PollID=O.PollID
    INNER JOIN (
        SELECT PollID,
               MAX(VoteCount) AS VoteCount
        FROM OptionVotes GROUP BY PollID
        ) AS MV ON MV.PollID=P.PollID AND O.VoteCount=MV.VoteCount
    GROUP BY O.PollID
    ORDER BY O.PollID DESC;

  num_pages: |
    SELECT CEIL(
        CAST(COUNT(*) AS FLOAT) /
        CAST(%s AS FLOAT)) AS MaxPages
    FROM Polls;

  new_option: |
    INSERT INTO
        Options
    (PollID, Original, Username, Emoji, Option)
    VALUES (%s, %s, %s, %s, %s)

  get_emojis: SELECT Emoji FROM Options WHERE PollID=%s;

  get_message_from_id: |
    UPDATE Polls SET LastUpdate=%s
    WHERE PollID=%s
    RETURNING Message, Channel;

  get_id_from_message: |
    UPDATE Polls SET LastUpdate=%s
    WHERE Message=%s AND Channel=%s
    RETURNING PollID;

  new_poll: |
    INSERT INTO Polls
    (Question, Username, Time, LastUpdate, Message, Channel)
    VALUES (%s, %s, %s, %s, %s, %s)
    RETURNING PollID;

  remove_vote: |
    DELETE FROM Votes WHERE
    Username=%s AND OptionID=%s;

  add_vote: |
    INSERT INTO Votes (Username, OptionID)
    VALUES (%s, %s);

  option_from_emoji: |
    SELECT OptionID FROM Options WHERE
    PollID=%s AND Emoji=%s;

  get_poll: |
    SELECT Question, Username FROM Polls
    WHERE PollID=%s;

  move_poll: |
    UPDATE Polls SET Message=%s, Channel=%s
    WHERE PollID=%s;

  delete_poll_info: |
    SELECT Username, Message, Channel FROM Polls
    WHERE PollID=%s;

  delete_poll: |
    DELETE FROM Votes AS V
    WHERE V.OptionID IN (
        SELECT OptionID
        FROM Options AS O
        WHERE O.PollID=%s
    );
    DELETE FROM Options WHERE PollID=%s;
    DELETE FROM Polls WHERE PollID=%s;

  poll_metadata: |
    SELECT Question, LastUpdate, Time, Username, Message, Channel
    FROM Polls WHERE PollID=%s;

  purge: |
    DELETE FROM Votes WHERE OptionID IN (
      SELECT OptionID FROM Purge
      WHERE PollID=%s
    );
    DELETE FROM Options WHERE OptionID IN (
      SELECT OptionID FROM Purge
      WHERE PollID=%s
    ) RETURNING Emoji;

  purge_force: |
    DELETE FROM Votes WHERE OptionID IN (
      SELECT OptionID FROM PurgeForce
      WHERE PollID=%s
    );
    DELETE FROM Options WHERE OptionID IN (
      SELECT OptionID FROM PurgeForce
      WHERE PollID=%s
    ) RETURNING Emoji;
