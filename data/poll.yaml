# text for polls
default_poll:
  options:
    - Yes
    - Maybe
    - No
  emojis:
    - 0001F44D
    - 0001F937
    - 0001F44E

emojis:
  - 0001F1E6
  - 0001F1E7
  - 0001F1E8
  - 0001F1E9
  - 0001F1EA
  - 0001F1EB
  - 0001F1EC
  - 0001F1ED
  - 0001F1EE
  - 0001F1EF
  - 0001F1F0
  - 0001F1F1
  - 0001F1F2
  - 0001F1F3
  - 0001F1F4
  - 0001F1F5
  - 0001F1F6
  - 0001F1F7
  - 0001F1F8
  - 0001F1F9

style:
  # 1. id
  # 2. creator
  poll_header: __**Poll**__ (id \#{}) __**from {}**__

  # 1. question
  question_string: "**Question**: {}"

  # 1. num_votes
  # 2. "vote"/"votes"
  # 3. emoji
  # 4. option
  # 5. voter names
  option_string: "`{} {}` {}: *{}* - {}"

  # there's no chance of this ever being i18n-ed, but
  # the option is still there.
  vote_singular: "vote "
  vote_plural: votes

  no_votes: "Nobody :("
  no_votes_summary: "No votes :("
  summary_title: Poll List

  summary_string: "**#{}:** {} - *{}*"
  summary_footer: "Page {} of {}"

messages:
  loading: Loading poll...

errors:
  command_not_found: Poll subcommand invalid.
    Type !help poll for a list of valid subcommands.
  wrong_arg_length: You've entered the wrong number of arguments.
    Type !help poll for help with command syntax.
  question-too-long: The question you've entered is too long. Please
    limit your question to 255 characters.
  options_too_long: One of the options you've entered is too long.
    Please limit each option to 80 characters.
  option_too_long: The option you've entered is too long. Please limit
    your option to 80 characters.
  # PollID not in database when it *ABSOLUTELY* should be.
  # separate from an invalid ID error because that's a user error.
  # this is a "never should happen" server error.
  poll_not_found_critical: Poll not found in database. Tell Eric.

  poll_not_found: Invalid ID. Use !poll view to see the poll ID of recent polls.

  options_not_found: Options not found in database. Tell Eric.

  too_many_options: The poll has too many options. Please remove some with
    !poll purge before continuing.
  poll_overflow: There's too much to display in this poll. Please use
    !poll purge to remove some extraneous options.
  id_is_nan: <id> should be a number. Use !help poll for help with command
    syntax.
  page_is_nan: <page> should be a number. Use !help poll for help with command
    syntax.
  no_polls_to_list: There are currently no polls.
    Create a poll with !poll create.
  page_oob: The page you requested is out of bounds.

  poll_deleted: The message or channel containing the poll was deleted. Please
    revive the poll with !poll revive <id>.


sql_requests:
  reset: |
    DROP TABLE IF EXISTS Polls;
    DROP TABLE IF EXISTS Options;
    DROP TABLE IF EXISTS Votes;

    CREATE TABLE Polls (
    PollID     serial,
    Question   varchar(255),
    Username   char(16),
    Time       timestamp,
    LastUpdate timestamp,
    Message    char(16),
    Channel    char(16));

    CREATE TABLE Options (
    OptionID  serial,
    PollID    int,
    Original  bool,
    Username  char(16),
    Emoji     char(8),
    Option    varchar(255));

    CREATE TABLE Votes (
    Username  char(16),
    OptionID  int);

    DROP VIEW IF EXISTS OptionVotes;

    CREATE OR REPLACE VIEW OptionVotes AS (
    SELECT
    MAX(O.PollID) AS PollID,
    MAX(O.Option) AS Option,
    COUNT(V.Username) AS VoteCount
    FROM Options AS O
    LEFT OUTER JOIN Votes AS V
    ON O.OptionID=V.OptionID
    GROUP BY O.OptionID);

  readout: |
    SELECT MAX(O.OptionID) AS OptionID,
           MAX(Emoji) AS Emoji,
           MAX(Option) AS Option,
           COUNT(V.Username) AS VoteCount,
           STRING_AGG(V.Username, ' ') AS Votes
    FROM Options AS O
    LEFT OUTER JOIN Votes AS V
    ON O.OptionID=V.OptionID
    WHERE O.PollID=1
    GROUP BY O.OptionID
    ORDER BY
        VoteCount DESC,
        OptionID;

  summary: |
    SELECT MAX(P.PollID) AS PollID,
           MAX(P.Question) AS Question,
           (CASE
                WHEN MAX(MV.VoteCount)=0 THEN %s
                ELSE STRING_AGG(O.Option, ', ') END) AS Result
    FROM (
        SELECT Question,
               PollID
        FROM Polls
        ORDER BY PollID DESC
        OFFSET %s
        LIMIT %s
        ) AS P
    INNER JOIN OptionVotes AS O ON P.PollID=O.PollID
    INNER JOIN (
        SELECT PollID,
               MAX(VoteCount) AS VoteCount
        FROM OptionVotes GROUP BY PollID
        ) AS MV ON MV.PollID=P.PollID AND O.VoteCount=MV.VoteCount
    GROUP BY O.PollID;

  num_pages: |
    SELECT CEIL(
        CAST(COUNT(*) AS FLOAT) /
        CAST(%s AS FLOAT)) AS MaxPages
    FROM Polls;

  new_option: |
    INSERT INTO
        Options
    (PollID, Original, Username, Emoji, Option)
    VALUES (%s, %s, %s, %s, %s)

  get_emojis: SELECT Emoji FROM Options WHERE PollID=%s;

  get_message_from_id: |
    UPDATE Polls SET LastUpdate=%s
    WHERE PollID=%s
    RETURNING Message, Channel;

  get_id_from_message: |
    UPDATE Polls SET LastUpdate=%s
    WHERE Message=%s AND Channel=%s
    RETURNING PollID;

  new_poll: |
    INSERT INTO Polls
    (Question, Username, Time, LastUpdate, Message, Channel)
    VALUES (%s, %s, %s, %s, %s, %s)
    RETURNING PollID;

  remove_vote: |
    DELETE FROM Votes WHERE
    Username=%s AND OptionID=%s;

  add_vote: |
    INSERT INTO Votes (Username, OptionID)
    VALUES (%s, %s);

  option_from_emoji: |
    SELECT OptionID FROM Options WHERE
    PollID=%s AND Emoji=%s;

  get_poll: |
    SELECT Question, Username FROM Polls
    WHERE PollID=%s;